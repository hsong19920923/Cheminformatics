{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Cheminformatics-predicting-solubility.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hsong19920923/Cheminformatics/blob/master/Cheminformatics_predicting_solubility.txt\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OQi3X7TNUl5Y",
        "colab_type": "text"
      },
      "source": [
        "# **Cheminformatics in Python [PART 2.1] Predicting Solubility of Molecules using PyCaret | End-to-End Data Science Project** \n",
        "\n",
        "\n",
        "In this Jupyter notebook, we will continue our journey into the world of Cheminformatics (i.e. lies at the interface of Informatics and Chemistry) by simplifying this notebook via the use of the low-code machine learning library PyCaret.\n",
        "\n",
        "\n",
        "**Information from the previous notebook:**\n",
        "\n",
        "We will be reproducing a research article (by John S. Delaney$^1$) by applying Linear Regression to predict the solubility of molecules (i.e. solubility of drugs is an important physicochemical property in Drug discovery, design and development).\n",
        "\n",
        "This idea for this notebook was inspired by the excellent blog post by Pat Walters$^2$ where he reproduced the linear regression model with similar degree of performance as that of Delaney. This example is also briefly described in the book ***Deep Learning for the Life Sciences: Applying Deep Learning to Genomics, Microscopy, Drug Discovery, and More***.$^3$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AQW_Ts66R4Ms",
        "colab_type": "text"
      },
      "source": [
        "## **1. Install conda and libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-jNwdYoBR8ea",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b1d5fe0e-b42c-4521-a556-2adb2d0c0358"
      },
      "source": [
        "! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n",
        "! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh\n",
        "! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local\n",
        "! conda install -c rdkit rdkit -y\n",
        "import sys\n",
        "sys.path.append('/usr/local/lib/python3.7/site-packages/')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-09-10 11:14:02--  https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n",
            "Resolving repo.anaconda.com (repo.anaconda.com)... 104.16.131.3, 104.16.130.3, 2606:4700::6810:8203, ...\n",
            "Connecting to repo.anaconda.com (repo.anaconda.com)|104.16.131.3|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 85055499 (81M) [application/x-sh]\n",
            "Saving to: ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh.1’\n",
            "\n",
            "Miniconda3-py37_4.8 100%[===================>]  81.12M  31.9MB/s    in 2.5s    \n",
            "\n",
            "2020-09-10 11:14:05 (31.9 MB/s) - ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh.1’ saved [85055499/85055499]\n",
            "\n",
            "PREFIX=/usr/local\n",
            "Unpacking payload ...\n",
            "Collecting package metadata (current_repodata.json): - \b\b\\ \b\bdone\n",
            "Solving environment: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n",
            "\n",
            "## Package Plan ##\n",
            "\n",
            "  environment location: /usr/local\n",
            "\n",
            "  added / updated specs:\n",
            "    - _libgcc_mutex==0.1=main\n",
            "    - asn1crypto==1.3.0=py37_0\n",
            "    - ca-certificates==2020.1.1=0\n",
            "    - certifi==2019.11.28=py37_0\n",
            "    - cffi==1.14.0=py37h2e261b9_0\n",
            "    - chardet==3.0.4=py37_1003\n",
            "    - conda-package-handling==1.6.0=py37h7b6447c_0\n",
            "    - conda==4.8.2=py37_0\n",
            "    - cryptography==2.8=py37h1ba5d50_0\n",
            "    - idna==2.8=py37_0\n",
            "    - ld_impl_linux-64==2.33.1=h53a641e_7\n",
            "    - libedit==3.1.20181209=hc058e9b_0\n",
            "    - libffi==3.2.1=hd88cf55_4\n",
            "    - libgcc-ng==9.1.0=hdf63c60_0\n",
            "    - libstdcxx-ng==9.1.0=hdf63c60_0\n",
            "    - ncurses==6.2=he6710b0_0\n",
            "    - openssl==1.1.1d=h7b6447c_4\n",
            "    - pip==20.0.2=py37_1\n",
            "    - pycosat==0.6.3=py37h7b6447c_0\n",
            "    - pycparser==2.19=py37_0\n",
            "    - pyopenssl==19.1.0=py37_0\n",
            "    - pysocks==1.7.1=py37_0\n",
            "    - python==3.7.6=h0371630_2\n",
            "    - readline==7.0=h7b6447c_5\n",
            "    - requests==2.22.0=py37_1\n",
            "    - ruamel_yaml==0.15.87=py37h7b6447c_0\n",
            "    - setuptools==45.2.0=py37_0\n",
            "    - six==1.14.0=py37_0\n",
            "    - sqlite==3.31.1=h7b6447c_0\n",
            "    - tk==8.6.8=hbc83047_0\n",
            "    - tqdm==4.42.1=py_0\n",
            "    - urllib3==1.25.8=py37_0\n",
            "    - wheel==0.34.2=py37_0\n",
            "    - xz==5.2.4=h14c3975_4\n",
            "    - yaml==0.1.7=had09818_2\n",
            "    - zlib==1.2.11=h7b6447c_3\n",
            "\n",
            "\n",
            "The following packages will be DOWNGRADED:\n",
            "\n",
            "  ca-certificates                               2020.7.22-0 --> 2020.1.1-0\n",
            "  certifi                                  2020.6.20-py37_0 --> 2019.11.28-py37_0\n",
            "  conda                                        4.8.4-py37_0 --> 4.8.2-py37_0\n",
            "  openssl                                 1.1.1g-h7b6447c_0 --> 1.1.1d-h7b6447c_4\n",
            "\n",
            "\n",
            "Preparing transaction: - \b\bdone\n",
            "Executing transaction: | \b\b/ \b\bdone\n",
            "installation finished.\n",
            "WARNING:\n",
            "    You currently have a PYTHONPATH environment variable set. This may cause\n",
            "    unexpected behavior when running the Python interpreter in Miniconda3.\n",
            "    For best results, please verify that your PYTHONPATH only points to\n",
            "    directories of packages that are compatible with the Python interpreter\n",
            "    in Miniconda3: /usr/local\n",
            "Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n",
            "Solving environment: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n",
            "\n",
            "## Package Plan ##\n",
            "\n",
            "  environment location: /usr/local\n",
            "\n",
            "  added / updated specs:\n",
            "    - rdkit\n",
            "\n",
            "\n",
            "The following packages will be UPDATED:\n",
            "\n",
            "  ca-certificates                                2020.1.1-0 --> 2020.7.22-0\n",
            "  certifi                                 2019.11.28-py37_0 --> 2020.6.20-py37_0\n",
            "  conda                                        4.8.2-py37_0 --> 4.8.4-py37_0\n",
            "  openssl                                 1.1.1d-h7b6447c_4 --> 1.1.1g-h7b6447c_0\n",
            "\n",
            "\n",
            "Preparing transaction: / \b\bdone\n",
            "Verifying transaction: \\ \b\b| \b\bdone\n",
            "Executing transaction: - \b\bdone\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H661uGwCNFMC",
        "colab_type": "text"
      },
      "source": [
        "## **2. Delaney's solubility dataset**\n",
        "\n",
        "The original [Delaney's dataset](https://pubs.acs.org/doi/10.1021/ci034243x) available as a [Supplementary file](https://pubs.acs.org/doi/10.1021/ci034243x)$^4$. The full paper is entitled [ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure](https://pubs.acs.org/doi/10.1021/ci034243x).$^1$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s6o9QzQnNRVx",
        "colab_type": "text"
      },
      "source": [
        "### **2.1. Download the dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6KKvV74LM1it",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# ! wget https://pubs.acs.org/doi/suppl/10.1021/ci034243x/suppl_file/ci034243xsi20040112_053635.txt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PJGp_xenNYKy",
        "colab_type": "text"
      },
      "source": [
        "### **2.2. Read in the dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ufiOpEbNooH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nLS6bwiRNtuV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "outputId": "ac2e9d7f-37c4-4f55-bb72-c3180e716a49"
      },
      "source": [
        "delaney_url = 'https://raw.githubusercontent.com/dataprofessor/data/master/delaney.csv'\n",
        "sol = pd.read_csv(delaney_url)\n",
        "sol"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Compound ID</th>\n",
              "      <th>measured log(solubility:mol/L)</th>\n",
              "      <th>ESOL predicted log(solubility:mol/L)</th>\n",
              "      <th>SMILES</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1,1,1,2-Tetrachloroethane</td>\n",
              "      <td>-2.180</td>\n",
              "      <td>-2.794</td>\n",
              "      <td>ClCC(Cl)(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1,1,1-Trichloroethane</td>\n",
              "      <td>-2.000</td>\n",
              "      <td>-2.232</td>\n",
              "      <td>CC(Cl)(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1,1,2,2-Tetrachloroethane</td>\n",
              "      <td>-1.740</td>\n",
              "      <td>-2.549</td>\n",
              "      <td>ClC(Cl)C(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1,1,2-Trichloroethane</td>\n",
              "      <td>-1.480</td>\n",
              "      <td>-1.961</td>\n",
              "      <td>ClCC(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1,1,2-Trichlorotrifluoroethane</td>\n",
              "      <td>-3.040</td>\n",
              "      <td>-3.077</td>\n",
              "      <td>FC(F)(Cl)C(F)(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>vamidothion</td>\n",
              "      <td>1.144</td>\n",
              "      <td>-1.446</td>\n",
              "      <td>CNC(=O)C(C)SCCSP(=O)(OC)(OC)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>Vinclozolin</td>\n",
              "      <td>-4.925</td>\n",
              "      <td>-4.377</td>\n",
              "      <td>CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>Warfarin</td>\n",
              "      <td>-3.893</td>\n",
              "      <td>-3.913</td>\n",
              "      <td>CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>Xipamide</td>\n",
              "      <td>-3.790</td>\n",
              "      <td>-3.642</td>\n",
              "      <td>Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>XMC</td>\n",
              "      <td>-2.581</td>\n",
              "      <td>-2.688</td>\n",
              "      <td>CNC(=O)Oc1cc(C)cc(C)c1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                         Compound ID  ...                                       SMILES\n",
              "0          1,1,1,2-Tetrachloroethane  ...                               ClCC(Cl)(Cl)Cl\n",
              "1              1,1,1-Trichloroethane  ...                                 CC(Cl)(Cl)Cl\n",
              "2          1,1,2,2-Tetrachloroethane  ...                               ClC(Cl)C(Cl)Cl\n",
              "3              1,1,2-Trichloroethane  ...                                   ClCC(Cl)Cl\n",
              "4     1,1,2-Trichlorotrifluoroethane  ...                          FC(F)(Cl)C(F)(Cl)Cl\n",
              "...                              ...  ...                                          ...\n",
              "1139                     vamidothion  ...                 CNC(=O)C(C)SCCSP(=O)(OC)(OC)\n",
              "1140                     Vinclozolin  ...        CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C\n",
              "1141                        Warfarin  ...       CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O \n",
              "1142                        Xipamide  ...  Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O\n",
              "1143                             XMC  ...                       CNC(=O)Oc1cc(C)cc(C)c1\n",
              "\n",
              "[1144 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2gLSZaaLJbPm",
        "colab_type": "text"
      },
      "source": [
        "# **2.3. Examining the Smiles Data**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pARubrcfJrgO",
        "colab_type": "text"
      },
      "source": [
        "Chemical structures are encoded by a string of text known as **SMILES** which is acronym of** Simplified Molecular-Input Line-Entry System** "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FsfCuNkuIkEo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "a26a475d-cfad-4db0-cc32-57b990d6c253"
      },
      "source": [
        "sol.SMILES"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                                    ClCC(Cl)(Cl)Cl\n",
              "1                                      CC(Cl)(Cl)Cl\n",
              "2                                    ClC(Cl)C(Cl)Cl\n",
              "3                                        ClCC(Cl)Cl\n",
              "4                               FC(F)(Cl)C(F)(Cl)Cl\n",
              "                           ...                     \n",
              "1139                   CNC(=O)C(C)SCCSP(=O)(OC)(OC)\n",
              "1140          CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C\n",
              "1141         CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O \n",
              "1142    Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O\n",
              "1143                         CNC(=O)Oc1cc(C)cc(C)c1\n",
              "Name: SMILES, Length: 1144, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TR2oP5lRy-gC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "56b5559b-e365-431c-842f-6bd70457695d"
      },
      "source": [
        "sol.SMILES[1000]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'CCCC1CCCC1'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VQRsxBWQzWlQ",
        "colab_type": "text"
      },
      "source": [
        "# **2.4 Convert a molecule from the SMILES string to an rdkit object**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HJSfTosGI5EX",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1P3PZtj3ztAB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from rdkit import Chem"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bMVYbnZK0GUs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "2c79df8e-f7bf-4d5c-deaf-27eb9b833e0e"
      },
      "source": [
        "Chem.MolFromSmiles(sol.SMILES[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<rdkit.Chem.rdchem.Mol at 0x7f8406d958a0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pJ7H2LLB0y7X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6b2be73f-2649-4e1f-8b68-bac395bcc79d"
      },
      "source": [
        "Chem.MolFromSmiles('ClCC(Cl)(Cl)Cl')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<rdkit.Chem.rdchem.Mol at 0x7f8406d959e0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zao0feae1JGD",
        "colab_type": "text"
      },
      "source": [
        "# **2.5 Working with rdkit object**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qIr52hkG1ajd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "m=Chem.MolFromSmiles('CCCC1CCCC1')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qcoGWrxP1t0m",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b31d2c48-ad9a-4697-fdbd-e50425af22f3"
      },
      "source": [
        "m.GetNumAtoms()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uqQLXGKQQAvX",
        "colab_type": "text"
      },
      "source": [
        "## **3. Calculate molecular descriptors in rdkit**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iD_6apg8kYDy",
        "colab_type": "text"
      },
      "source": [
        "### **3.1. Convert list of molecules to rdkit object**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQjMv-wLOlmg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from rdkit import Chem"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibQDkWbL2xeB",
        "colab_type": "text"
      },
      "source": [
        "**3.1.1. Method 1**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "772E3Tt22-kz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mol_list=[]\n",
        "for element in sol.SMILES:\n",
        "  mol= Chem.MolFromSmiles(element)\n",
        "  mol_list.append(mol)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SkGKpyYU3ljr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c3dd831e-3064-4d0f-c51d-106cf39a340e"
      },
      "source": [
        "len(mol_list)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1144"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UABK0hUg3n4q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "outputId": "c7be067a-5f6b-463c-f1c9-6fd5de37c021"
      },
      "source": [
        "mol_list[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<rdkit.Chem.rdchem.Mol at 0x7f8406d95850>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95440>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95800>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95b20>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95530>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d954e0>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95350>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d952b0>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95210>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406d95a30>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QkzeW70Z35bG",
        "colab_type": "text"
      },
      "source": [
        "**3.1.2 Method 2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AaHAVM2yFm3J",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mol_list2 = [Chem.MolFromSmiles(element) for element in sol.SMILES]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fw5BCeh7F2c9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "768b90f0-ec37-48f0-ff49-32a4a40e809a"
      },
      "source": [
        "len(mol_list2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1144"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uASSo7ZMF5iv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "outputId": "bfa3999b-17b3-4846-856d-a2d9ccf66804"
      },
      "source": [
        "mol_list2[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<rdkit.Chem.rdchem.Mol at 0x7f8406dadcb0>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406dade90>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406daddf0>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406dadee0>,\n",
              " <rdkit.Chem.rdchem.Mol at 0x7f8406dadf30>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "olyPX1TjQMvr",
        "colab_type": "text"
      },
      "source": [
        "### **3.2. Calculate molecular descriptors**\n",
        "\n",
        "To predict **LogS** (log of the aqueous solubility), the study by Delaney makes use of 4 molecular descriptors:\n",
        "1. **cLogP** *(Octanol-water partition coefficient)*\n",
        "2. **MW** *(Molecular weight)*\n",
        "3. **RB** *(Number of rotatable bonds)*\n",
        "4. **AP** *(Aromatic proportion = number of aromatic atoms / total number of heavy atoms)*\n",
        "\n",
        "Unfortunately, rdkit readily computes the first 3. As for the AP descriptor, we will calculate this by manually computing the ratio of the *number of aromatic atoms* to the *total number of heavy atoms* which rdkit can compute."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iS4w5r5ocxT8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "from rdkit.Chem import Descriptors"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ei01Srg7KcV",
        "colab_type": "text"
      },
      "source": [
        "**3.2.1. LogP, MW and RB**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kd11hjyU7QUZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Inspired by: https://codeocean.com/explore/capsules?query=tag:data-curation\n",
        "def generate(smiles, verbose=False):\n",
        "\n",
        "    moldata= []\n",
        "    for elem in smiles:\n",
        "        mol=Chem.MolFromSmiles(elem) \n",
        "        moldata.append(mol)\n",
        "       \n",
        "    baseData= np.arange(1,1)\n",
        "    i=0  \n",
        "    for mol in moldata:        \n",
        "       \n",
        "        desc_MolLogP = Descriptors.MolLogP(mol)\n",
        "        desc_MolWt = Descriptors.MolWt(mol)\n",
        "        desc_NumRotatableBonds = Descriptors.NumRotatableBonds(mol)\n",
        "        \n",
        "           \n",
        "        row = np.array([desc_MolLogP,\n",
        "                        desc_MolWt,\n",
        "                        desc_NumRotatableBonds])   \n",
        "    \n",
        "        if(i==0):\n",
        "            baseData=row\n",
        "        else:\n",
        "            baseData=np.vstack([baseData, row])\n",
        "        i=i+1      \n",
        "    \n",
        "    columnNames=[\"MolLogP\",\"MolWt\",\"NumRotatableBonds\"]   \n",
        "    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n",
        "    \n",
        "    return descriptors"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wb5nirPz7g_Q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "f80537e0-7ff1-4212-8e43-e2055d05034e"
      },
      "source": [
        "df=generate(sol.SMILES)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.59540</td>\n",
              "      <td>167.850</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.37650</td>\n",
              "      <td>133.405</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.59380</td>\n",
              "      <td>167.850</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.02890</td>\n",
              "      <td>133.405</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.98820</td>\n",
              "      <td>287.343</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>3.42130</td>\n",
              "      <td>286.114</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>3.60960</td>\n",
              "      <td>308.333</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>2.56214</td>\n",
              "      <td>354.815</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>2.02164</td>\n",
              "      <td>179.219</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds\n",
              "0     2.59540  167.850                0.0\n",
              "1     2.37650  133.405                0.0\n",
              "2     2.59380  167.850                1.0\n",
              "3     2.02890  133.405                1.0\n",
              "4     2.91890  187.375                1.0\n",
              "...       ...      ...                ...\n",
              "1139  1.98820  287.343                8.0\n",
              "1140  3.42130  286.114                2.0\n",
              "1141  3.60960  308.333                4.0\n",
              "1142  2.56214  354.815                3.0\n",
              "1143  2.02164  179.219                1.0\n",
              "\n",
              "[1144 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nzfNkVAD8gaC",
        "colab_type": "text"
      },
      "source": [
        "**3.2.2 Aromatic proportion**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GN0RgmFJ82af",
        "colab_type": "text"
      },
      "source": [
        "3.2.1.1 Number of Aromatic Atom"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SVhvy4zZZ6AD",
        "colab_type": "text"
      },
      "source": [
        "Here, we will create a custom function to calculate the **Number of aromatic atoms**.With this descriptor we can use it to subsequently calculate the AP descriptor"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4tLEVuMgaeg7",
        "colab_type": "text"
      },
      "source": [
        "Computing for single molecule"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G4oL4DAB9B1v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "m=Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yEVsKnjZ8gGE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "02a82c8d-c9cc-44c0-8042-cd2db2b986d1"
      },
      "source": [
        "aromatic_atoms=[m.GetAtomWithIdx(i).GetIsAromatic() for i in range(m.GetNumAtoms())]\n",
        "aromatic_atoms"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[False,\n",
              " False,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " False,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " True,\n",
              " False,\n",
              " False,\n",
              " True,\n",
              " True]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CVoMhyyEAHc5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def AromaticAtoms(m):\n",
        "  aromatic_atoms=[m.GetAtomWithIdx(i).GetIsAromatic() for i in range(m.GetNumAtoms())]\n",
        "  aa_count=[]\n",
        "  for i in aromatic_atoms:\n",
        "    if i==True:\n",
        "      aa_count.append(1)\n",
        "    sum_aa_count=sum(aromatic_atoms)\n",
        "    return sum_aa_count\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8-ZkSWn7BmIr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c8cafd38-16f4-4623-fd68-cb4c330fd67a"
      },
      "source": [
        "AromaticAtoms(m)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "19"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2okvtbMGL6mw",
        "colab_type": "text"
      },
      "source": [
        "Computing for molecules in entire database"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bDlJ_5FVMCRF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b724f9bc-c31f-4f1c-9c7c-7dfb0516dd91"
      },
      "source": [
        "desc_AromaticAtoms=[AromaticAtoms(element) for element in mol_list]\n",
        "\n",
        "desc_AromaticAtoms"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 14,\n",
              " 0,\n",
              " 0,\n",
              " 14,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 10,\n",
              " 14,\n",
              " 6,\n",
              " 10,\n",
              " 10,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 10,\n",
              " 14,\n",
              " 10,\n",
              " 10,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 14,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 14,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 18,\n",
              " 0,\n",
              " 9,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 18,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 0,\n",
              " 18,\n",
              " 6,\n",
              " 0,\n",
              " 18,\n",
              " 10,\n",
              " 10,\n",
              " 18,\n",
              " 18,\n",
              " 10,\n",
              " 10,\n",
              " 10,\n",
              " 14,\n",
              " 14,\n",
              " 14,\n",
              " 12,\n",
              " 10,\n",
              " 10,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 5,\n",
              " 0,\n",
              " 6,\n",
              " 11,\n",
              " 14,\n",
              " 0,\n",
              " 0,\n",
              " 9,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 9,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 11,\n",
              " 5,\n",
              " 12,\n",
              " 5,\n",
              " 0,\n",
              " 11,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 14,\n",
              " 12,\n",
              " 11,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 9,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 11,\n",
              " 16,\n",
              " 20,\n",
              " 20,\n",
              " 16,\n",
              " 20,\n",
              " 20,\n",
              " 20,\n",
              " 22,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 12,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 20,\n",
              " 0,\n",
              " 6,\n",
              " 28,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 5,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 9,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 10,\n",
              " 13,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 10,\n",
              " 12,\n",
              " 6,\n",
              " 9,\n",
              " 18,\n",
              " 18,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 24,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 16,\n",
              " 10,\n",
              " 16,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 5,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 13,\n",
              " 13,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 11,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 9,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 10,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 9,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 18,\n",
              " 11,\n",
              " 12,\n",
              " 0,\n",
              " 6,\n",
              " 18,\n",
              " 11,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 16,\n",
              " 18,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 16,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 18,\n",
              " 6,\n",
              " 17,\n",
              " 18,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 5,\n",
              " 5,\n",
              " 0,\n",
              " 16,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 9,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 9,\n",
              " 6,\n",
              " 12,\n",
              " 9,\n",
              " 9,\n",
              " 6,\n",
              " 9,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 5,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 11,\n",
              " 6,\n",
              " 9,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 13,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 15,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 15,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 9,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 16,\n",
              " 0,\n",
              " 11,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 13,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 5,\n",
              " 6,\n",
              " 5,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 16,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 10,\n",
              " 18,\n",
              " 10,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 5,\n",
              " 12,\n",
              " 5,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 5,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 24,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 11,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 12,\n",
              " 12,\n",
              " 20,\n",
              " 6,\n",
              " 6,\n",
              " 14,\n",
              " 14,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 18,\n",
              " 12,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 9,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 22,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 12,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 6,\n",
              " 6,\n",
              " 0,\n",
              " 11,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 0,\n",
              " 6,\n",
              " ...]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H7L1CTaq8lm7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tbtIUWOrZl-F",
        "colab_type": "text"
      },
      "source": [
        "**3.2.1.2. Number of heavy atoms**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5kyl-jMlZtJ7",
        "colab_type": "text"
      },
      "source": [
        "Here, we will use the existing for calculating the Number of heavy Atoms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2jp3pBwdXHX3",
        "colab_type": "text"
      },
      "source": [
        "Computing for a single molecule"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AgwL3dFWVHQx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ef4ba8d5-b8b2-4afa-91fa-ec3ab6ea31a5"
      },
      "source": [
        "m=Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')\n",
        "Descriptors.HeavyAtomCount(m)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "34"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5eF7YR0AYD-s",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a4ef4219-fa27-49ff-bb59-3356c565c872"
      },
      "source": [
        "desc_HeavyAtomCount=[Descriptors.HeavyAtomCount(element) for element in mol_list]\n",
        "desc_HeavyAtomCount"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[6,\n",
              " 5,\n",
              " 6,\n",
              " 5,\n",
              " 8,\n",
              " 4,\n",
              " 4,\n",
              " 8,\n",
              " 10,\n",
              " 10,\n",
              " 10,\n",
              " 9,\n",
              " 9,\n",
              " 10,\n",
              " 10,\n",
              " 10,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 4,\n",
              " 8,\n",
              " 4,\n",
              " 5,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 12,\n",
              " 4,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 15,\n",
              " 8,\n",
              " 4,\n",
              " 8,\n",
              " 8,\n",
              " 5,\n",
              " 8,\n",
              " 8,\n",
              " 12,\n",
              " 12,\n",
              " 8,\n",
              " 6,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 8,\n",
              " 12,\n",
              " 12,\n",
              " 5,\n",
              " 12,\n",
              " 6,\n",
              " 14,\n",
              " 11,\n",
              " 22,\n",
              " 15,\n",
              " 5,\n",
              " 5,\n",
              " 8,\n",
              " 7,\n",
              " 11,\n",
              " 9,\n",
              " 6,\n",
              " 4,\n",
              " 5,\n",
              " 4,\n",
              " 4,\n",
              " 4,\n",
              " 5,\n",
              " 5,\n",
              " 8,\n",
              " 7,\n",
              " 11,\n",
              " 6,\n",
              " 4,\n",
              " 11,\n",
              " 10,\n",
              " 13,\n",
              " 12,\n",
              " 8,\n",
              " 7,\n",
              " 7,\n",
              " 17,\n",
              " 7,\n",
              " 6,\n",
              " 7,\n",
              " 6,\n",
              " 5,\n",
              " 8,\n",
              " 11,\n",
              " 4,\n",
              " 7,\n",
              " 14,\n",
              " 11,\n",
              " 15,\n",
              " 9,\n",
              " 11,\n",
              " 11,\n",
              " 13,\n",
              " 6,\n",
              " 10,\n",
              " 9,\n",
              " 9,\n",
              " 19,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 16,\n",
              " 6,\n",
              " 5,\n",
              " 5,\n",
              " 9,\n",
              " 4,\n",
              " 15,\n",
              " 22,\n",
              " 20,\n",
              " 18,\n",
              " 20,\n",
              " 18,\n",
              " 16,\n",
              " 19,\n",
              " 19,\n",
              " 18,\n",
              " 17,\n",
              " 17,\n",
              " 18,\n",
              " 16,\n",
              " 7,\n",
              " 18,\n",
              " 18,\n",
              " 16,\n",
              " 17,\n",
              " 8,\n",
              " 9,\n",
              " 16,\n",
              " 7,\n",
              " 6,\n",
              " 7,\n",
              " 8,\n",
              " 6,\n",
              " 14,\n",
              " 18,\n",
              " 19,\n",
              " 18,\n",
              " 17,\n",
              " 17,\n",
              " 16,\n",
              " 11,\n",
              " 11,\n",
              " 15,\n",
              " 15,\n",
              " 10,\n",
              " 8,\n",
              " 11,\n",
              " 15,\n",
              " 10,\n",
              " 10,\n",
              " 11,\n",
              " 9,\n",
              " 6,\n",
              " 6,\n",
              " 12,\n",
              " 7,\n",
              " 8,\n",
              " 15,\n",
              " 15,\n",
              " 10,\n",
              " 15,\n",
              " 10,\n",
              " 10,\n",
              " 16,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 7,\n",
              " 9,\n",
              " 8,\n",
              " 13,\n",
              " 14,\n",
              " 14,\n",
              " 9,\n",
              " 12,\n",
              " 9,\n",
              " 8,\n",
              " 13,\n",
              " 14,\n",
              " 12,\n",
              " 15,\n",
              " 11,\n",
              " 11,\n",
              " 4,\n",
              " 8,\n",
              " 5,\n",
              " 5,\n",
              " 8,\n",
              " 6,\n",
              " 9,\n",
              " 13,\n",
              " 5,\n",
              " 11,\n",
              " 8,\n",
              " 4,\n",
              " 8,\n",
              " 6,\n",
              " 11,\n",
              " 8,\n",
              " 7,\n",
              " 9,\n",
              " 9,\n",
              " 7,\n",
              " 9,\n",
              " 12,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 7,\n",
              " 7,\n",
              " 11,\n",
              " 7,\n",
              " 4,\n",
              " 10,\n",
              " 12,\n",
              " 5,\n",
              " 5,\n",
              " 5,\n",
              " 6,\n",
              " 9,\n",
              " 8,\n",
              " 7,\n",
              " 7,\n",
              " 15,\n",
              " 6,\n",
              " 5,\n",
              " 6,\n",
              " 8,\n",
              " 11,\n",
              " 6,\n",
              " 7,\n",
              " 15,\n",
              " 8,\n",
              " 5,\n",
              " 4,\n",
              " 4,\n",
              " 11,\n",
              " 6,\n",
              " 11,\n",
              " 6,\n",
              " 10,\n",
              " 10,\n",
              " 9,\n",
              " 9,\n",
              " 6,\n",
              " 6,\n",
              " 10,\n",
              " 4,\n",
              " 6,\n",
              " 12,\n",
              " 7,\n",
              " 7,\n",
              " 7,\n",
              " 7,\n",
              " 11,\n",
              " 9,\n",
              " 9,\n",
              " 8,\n",
              " 14,\n",
              " 9,\n",
              " 9,\n",
              " 8,\n",
              " 26,\n",
              " 9,\n",
              " 13,\n",
              " 8,\n",
              " 5,\n",
              " 24,\n",
              " 8,\n",
              " 8,\n",
              " 29,\n",
              " 7,\n",
              " 7,\n",
              " 28,\n",
              " 6,\n",
              " 5,\n",
              " 6,\n",
              " 6,\n",
              " 7,\n",
              " 7,\n",
              " 7,\n",
              " 9,\n",
              " 8,\n",
              " 7,\n",
              " 6,\n",
              " 21,\n",
              " 8,\n",
              " 10,\n",
              " 6,\n",
              " 8,\n",
              " 9,\n",
              " 30,\n",
              " 6,\n",
              " 6,\n",
              " 27,\n",
              " 25,\n",
              " 14,\n",
              " 8,\n",
              " 8,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 14,\n",
              " 7,\n",
              " 10,\n",
              " 12,\n",
              " 7,\n",
              " 7,\n",
              " 13,\n",
              " 7,\n",
              " 11,\n",
              " 13,\n",
              " 6,\n",
              " 16,\n",
              " 17,\n",
              " 15,\n",
              " 15,\n",
              " 11,\n",
              " 11,\n",
              " 20,\n",
              " 14,\n",
              " 15,\n",
              " 13,\n",
              " 18,\n",
              " 16,\n",
              " 14,\n",
              " 17,\n",
              " 9,\n",
              " 11,\n",
              " 12,\n",
              " 19,\n",
              " 9,\n",
              " 10,\n",
              " 19,\n",
              " 11,\n",
              " 12,\n",
              " 19,\n",
              " 20,\n",
              " 12,\n",
              " 11,\n",
              " 11,\n",
              " 16,\n",
              " 15,\n",
              " 15,\n",
              " 27,\n",
              " 12,\n",
              " 12,\n",
              " 10,\n",
              " 4,\n",
              " 10,\n",
              " 13,\n",
              " 3,\n",
              " 9,\n",
              " 20,\n",
              " 14,\n",
              " 4,\n",
              " 4,\n",
              " 10,\n",
              " 22,\n",
              " 18,\n",
              " 26,\n",
              " 18,\n",
              " 11,\n",
              " 9,\n",
              " 10,\n",
              " 10,\n",
              " 20,\n",
              " 15,\n",
              " 15,\n",
              " 32,\n",
              " 15,\n",
              " 17,\n",
              " 6,\n",
              " 22,\n",
              " 6,\n",
              " 16,\n",
              " 15,\n",
              " 19,\n",
              " 21,\n",
              " 21,\n",
              " 11,\n",
              " 7,\n",
              " 21,\n",
              " 8,\n",
              " 14,\n",
              " 16,\n",
              " 14,\n",
              " 22,\n",
              " 26,\n",
              " 15,\n",
              " 14,\n",
              " 16,\n",
              " 14,\n",
              " 14,\n",
              " 16,\n",
              " 13,\n",
              " 27,\n",
              " 23,\n",
              " 28,\n",
              " 16,\n",
              " 21,\n",
              " 23,\n",
              " 8,\n",
              " 9,\n",
              " 6,\n",
              " 14,\n",
              " 19,\n",
              " 17,\n",
              " 20,\n",
              " 20,\n",
              " 17,\n",
              " 20,\n",
              " 20,\n",
              " 20,\n",
              " 22,\n",
              " 12,\n",
              " 16,\n",
              " 8,\n",
              " 14,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 8,\n",
              " 10,\n",
              " 11,\n",
              " 34,\n",
              " 14,\n",
              " 12,\n",
              " 20,\n",
              " 11,\n",
              " 14,\n",
              " 35,\n",
              " 7,\n",
              " 3,\n",
              " 4,\n",
              " 3,\n",
              " 2,\n",
              " 16,\n",
              " 22,\n",
              " 11,\n",
              " 15,\n",
              " 21,\n",
              " 15,\n",
              " 19,\n",
              " 21,\n",
              " 17,\n",
              " 14,\n",
              " 5,\n",
              " 4,\n",
              " 5,\n",
              " 15,\n",
              " 17,\n",
              " 16,\n",
              " 7,\n",
              " 14,\n",
              " 10,\n",
              " 5,\n",
              " 14,\n",
              " 11,\n",
              " 7,\n",
              " 18,\n",
              " 16,\n",
              " 15,\n",
              " 13,\n",
              " 17,\n",
              " 16,\n",
              " 18,\n",
              " 16,\n",
              " 12,\n",
              " 11,\n",
              " 11,\n",
              " 17,\n",
              " 20,\n",
              " 17,\n",
              " 15,\n",
              " 15,\n",
              " 18,\n",
              " 16,\n",
              " 13,\n",
              " 27,\n",
              " 5,\n",
              " 4,\n",
              " 7,\n",
              " 4,\n",
              " 3,\n",
              " 3,\n",
              " 14,\n",
              " 7,\n",
              " 22,\n",
              " 14,\n",
              " 17,\n",
              " 14,\n",
              " 20,\n",
              " 18,\n",
              " 14,\n",
              " 22,\n",
              " 14,\n",
              " 11,\n",
              " 20,\n",
              " 18,\n",
              " 4,\n",
              " 8,\n",
              " 5,\n",
              " 11,\n",
              " 16,\n",
              " 22,\n",
              " 24,\n",
              " 25,\n",
              " 26,\n",
              " 29,\n",
              " 24,\n",
              " 22,\n",
              " 22,\n",
              " 16,\n",
              " 14,\n",
              " 17,\n",
              " 12,\n",
              " 7,\n",
              " 8,\n",
              " 7,\n",
              " 15,\n",
              " 6,\n",
              " 7,\n",
              " 7,\n",
              " 6,\n",
              " 20,\n",
              " 14,\n",
              " 8,\n",
              " 9,\n",
              " 16,\n",
              " 5,\n",
              " 5,\n",
              " 13,\n",
              " 11,\n",
              " 14,\n",
              " 29,\n",
              " 31,\n",
              " 28,\n",
              " 8,\n",
              " 25,\n",
              " 17,\n",
              " 18,\n",
              " 18,\n",
              " 19,\n",
              " 10,\n",
              " 17,\n",
              " 28,\n",
              " 24,\n",
              " 27,\n",
              " 22,\n",
              " 28,\n",
              " 31,\n",
              " 11,\n",
              " 28,\n",
              " 23,\n",
              " 23,\n",
              " 15,\n",
              " 20,\n",
              " 19,\n",
              " 13,\n",
              " 13,\n",
              " 3,\n",
              " 9,\n",
              " 22,\n",
              " 20,\n",
              " 17,\n",
              " 3,\n",
              " 17,\n",
              " 20,\n",
              " 19,\n",
              " 20,\n",
              " 20,\n",
              " 5,\n",
              " 16,\n",
              " 5,\n",
              " 6,\n",
              " 20,\n",
              " 21,\n",
              " 21,\n",
              " 54,\n",
              " 55,\n",
              " 24,\n",
              " 3,\n",
              " 28,\n",
              " 7,\n",
              " 7,\n",
              " 18,\n",
              " 23,\n",
              " 15,\n",
              " 15,\n",
              " 5,\n",
              " 14,\n",
              " 3,\n",
              " 4,\n",
              " 22,\n",
              " 17,\n",
              " 12,\n",
              " 7,\n",
              " 28,\n",
              " 30,\n",
              " 16,\n",
              " 18,\n",
              " 13,\n",
              " 13,\n",
              " 13,\n",
              " 7,\n",
              " 16,\n",
              " 14,\n",
              " 19,\n",
              " 14,\n",
              " 10,\n",
              " 14,\n",
              " 13,\n",
              " 18,\n",
              " 20,\n",
              " 19,\n",
              " 21,\n",
              " 21,\n",
              " 20,\n",
              " 20,\n",
              " 21,\n",
              " 8,\n",
              " 20,\n",
              " 11,\n",
              " 21,\n",
              " 20,\n",
              " 23,\n",
              " 2,\n",
              " 3,\n",
              " 3,\n",
              " 22,\n",
              " 15,\n",
              " 19,\n",
              " 15,\n",
              " 23,\n",
              " 19,\n",
              " 19,\n",
              " 16,\n",
              " 6,\n",
              " 11,\n",
              " 10,\n",
              " 13,\n",
              " 14,\n",
              " 5,\n",
              " 11,\n",
              " 10,\n",
              " 13,\n",
              " 12,\n",
              " 9,\n",
              " 7,\n",
              " 6,\n",
              " 5,\n",
              " 8,\n",
              " 8,\n",
              " 2,\n",
              " 12,\n",
              " 12,\n",
              " 2,\n",
              " 28,\n",
              " 18,\n",
              " 42,\n",
              " 11,\n",
              " 12,\n",
              " 22,\n",
              " 15,\n",
              " 17,\n",
              " 17,\n",
              " 22,\n",
              " 26,\n",
              " 18,\n",
              " 16,\n",
              " 12,\n",
              " 22,\n",
              " 33,\n",
              " 9,\n",
              " 27,\n",
              " 29,\n",
              " 28,\n",
              " 16,\n",
              " 16,\n",
              " 13,\n",
              " 7,\n",
              " 27,\n",
              " 16,\n",
              " 24,\n",
              " 19,\n",
              " 22,\n",
              " 35,\n",
              " 16,\n",
              " 14,\n",
              " 12,\n",
              " 5,\n",
              " 7,\n",
              " 19,\n",
              " 26,\n",
              " 12,\n",
              " 16,\n",
              " 6,\n",
              " 15,\n",
              " 24,\n",
              " 9,\n",
              " 11,\n",
              " 7,\n",
              " 22,\n",
              " 17,\n",
              " 7,\n",
              " 10,\n",
              " 8,\n",
              " 26,\n",
              " 16,\n",
              " 12,\n",
              " 6,\n",
              " 20,\n",
              " 12,\n",
              " 7,\n",
              " 14,\n",
              " 16,\n",
              " 17,\n",
              " 26,\n",
              " 29,\n",
              " 17,\n",
              " 24,\n",
              " 10,\n",
              " 9,\n",
              " 24,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 19,\n",
              " 7,\n",
              " 3,\n",
              " 16,\n",
              " 2,\n",
              " 11,\n",
              " 16,\n",
              " 18,\n",
              " 8,\n",
              " 7,\n",
              " 10,\n",
              " 13,\n",
              " 17,\n",
              " 22,\n",
              " 11,\n",
              " 10,\n",
              " 9,\n",
              " 8,\n",
              " 10,\n",
              " 14,\n",
              " 22,\n",
              " 7,\n",
              " 6,\n",
              " 9,\n",
              " 15,\n",
              " 10,\n",
              " 20,\n",
              " 24,\n",
              " 21,\n",
              " 19,\n",
              " 23,\n",
              " 10,\n",
              " 17,\n",
              " 11,\n",
              " 12,\n",
              " 15,\n",
              " 21,\n",
              " 29,\n",
              " 19,\n",
              " 11,\n",
              " 23,\n",
              " 12,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 22,\n",
              " 19,\n",
              " 14,\n",
              " 25,\n",
              " 21,\n",
              " 20,\n",
              " 28,\n",
              " 13,\n",
              " 11,\n",
              " 11,\n",
              " 15,\n",
              " 10,\n",
              " 20,\n",
              " 1,\n",
              " 2,\n",
              " 19,\n",
              " 14,\n",
              " 16,\n",
              " 17,\n",
              " 22,\n",
              " 18,\n",
              " 16,\n",
              " 21,\n",
              " 5,\n",
              " 6,\n",
              " 10,\n",
              " 6,\n",
              " 8,\n",
              " 13,\n",
              " 4,\n",
              " 13,\n",
              " 9,\n",
              " 3,\n",
              " 15,\n",
              " 10,\n",
              " 12,\n",
              " 11,\n",
              " 8,\n",
              " 6,\n",
              " 5,\n",
              " 6,\n",
              " 7,\n",
              " 6,\n",
              " 20,\n",
              " 11,\n",
              " 25,\n",
              " 9,\n",
              " 19,\n",
              " 24,\n",
              " 11,\n",
              " 15,\n",
              " 12,\n",
              " 14,\n",
              " 12,\n",
              " 8,\n",
              " 15,\n",
              " 22,\n",
              " 8,\n",
              " 10,\n",
              " 10,\n",
              " 10,\n",
              " 14,\n",
              " 31,\n",
              " 13,\n",
              " 22,\n",
              " 8,\n",
              " 11,\n",
              " 6,\n",
              " 9,\n",
              " 13,\n",
              " 20,\n",
              " 18,\n",
              " 10,\n",
              " 17,\n",
              " 11,\n",
              " 9,\n",
              " 20,\n",
              " 21,\n",
              " 9,\n",
              " 25,\n",
              " 11,\n",
              " 22,\n",
              " 14,\n",
              " 22,\n",
              " 11,\n",
              " 21,\n",
              " 9,\n",
              " 5,\n",
              " 18,\n",
              " 17,\n",
              " 15,\n",
              " 4,\n",
              " 8,\n",
              " 9,\n",
              " 39,\n",
              " 16,\n",
              " 25,\n",
              " 23,\n",
              " 20,\n",
              " 18,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 8,\n",
              " 6,\n",
              " 8,\n",
              " 10,\n",
              " 9,\n",
              " 10,\n",
              " 11,\n",
              " 10,\n",
              " 10,\n",
              " 23,\n",
              " 18,\n",
              " 8,\n",
              " 22,\n",
              " 14,\n",
              " 20,\n",
              " 18,\n",
              " 8,\n",
              " 24,\n",
              " 14,\n",
              " 18,\n",
              " 18,\n",
              " 8,\n",
              " 8,\n",
              " 18,\n",
              " 14,\n",
              " 11,\n",
              " 8,\n",
              " 11,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 8,\n",
              " 13,\n",
              " 23,\n",
              " 11,\n",
              " 7,\n",
              " 12,\n",
              " 11,\n",
              " 5,\n",
              " 16,\n",
              " 9,\n",
              " 9,\n",
              " 11,\n",
              " 10,\n",
              " 24,\n",
              " 26,\n",
              " 20,\n",
              " 11,\n",
              " 13,\n",
              " 14,\n",
              " 14,\n",
              " 9,\n",
              " 22,\n",
              " 17,\n",
              " 7,\n",
              " 24,\n",
              " 26,\n",
              " 23,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 19,\n",
              " 13,\n",
              " 21,\n",
              " 19,\n",
              " 11,\n",
              " 11,\n",
              " 10,\n",
              " 11,\n",
              " 9,\n",
              " 22,\n",
              " 21,\n",
              " 11,\n",
              " 21,\n",
              " 17,\n",
              " 23,\n",
              " 10,\n",
              " 8,\n",
              " 10,\n",
              " 11,\n",
              " 10,\n",
              " 10,\n",
              " 13,\n",
              " 21,\n",
              " 26,\n",
              " 29,\n",
              " 23,\n",
              " 16,\n",
              " 14,\n",
              " 18,\n",
              " 23,\n",
              " 16,\n",
              " 16,\n",
              " 14,\n",
              " 3,\n",
              " 13,\n",
              " 15,\n",
              " 17,\n",
              " 22,\n",
              " 4,\n",
              " 4,\n",
              " 15,\n",
              " 7,\n",
              " 7,\n",
              " 6,\n",
              " 8,\n",
              " 9,\n",
              " ...]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TYJBLGHGZGUd",
        "colab_type": "text"
      },
      "source": [
        "**3.2.1.3 Computing the Aromatic Proportion (AP) decriptor**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TwP7q8PsYofK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "f3b28a27-c6d9-4cc4-b498-8e4ee3bbfed2"
      },
      "source": [
        "m=Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')\n",
        "AromaticAtoms(m)/Descriptors.HeavyAtomCount(m)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5588235294117647"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZzyGTVAZbUxr",
        "colab_type": "text"
      },
      "source": [
        "Computing the molecule in the entire dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bAdLDyHNbaIq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "56401443-90d5-4490-a77b-099523d42358"
      },
      "source": [
        "desc_AromaticProportion=[AromaticAtoms(element)/Descriptors.HeavyAtomCount(element) for element in mol_list]\n",
        "desc_AromaticProportion"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.4,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.8333333333333334,\n",
              " 0.5,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.75,\n",
              " 0.8333333333333334,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9333333333333333,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 0.9090909090909091,\n",
              " 0.9333333333333333,\n",
              " 0.6666666666666666,\n",
              " 0.9090909090909091,\n",
              " 0.9090909090909091,\n",
              " 0.7692307692307693,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.631578947368421,\n",
              " 0.631578947368421,\n",
              " 0.6666666666666666,\n",
              " 0.7058823529411765,\n",
              " 0.7058823529411765,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.7058823529411765,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 0.6666666666666666,\n",
              " 0.631578947368421,\n",
              " 0.6666666666666666,\n",
              " 0.7058823529411765,\n",
              " 0.7058823529411765,\n",
              " 0.75,\n",
              " 0.5454545454545454,\n",
              " 0.5454545454545454,\n",
              " 0.8,\n",
              " 0.8,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.8,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.8,\n",
              " 0.8,\n",
              " 0.6,\n",
              " 0.8,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.375,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.46153846153846156,\n",
              " 0.8571428571428571,\n",
              " 0.8571428571428571,\n",
              " 0.6666666666666666,\n",
              " 0.8333333333333334,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.46153846153846156,\n",
              " 0.8571428571428571,\n",
              " 0.8333333333333334,\n",
              " 0.9333333333333333,\n",
              " 0.9090909090909091,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.9230769230769231,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8333333333333334,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9333333333333333,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9333333333333333,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.8571428571428571,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.46153846153846156,\n",
              " 0.6666666666666666,\n",
              " 0.9230769230769231,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.41379310344827586,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.9,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.4444444444444444,\n",
              " 0.48,\n",
              " 0.8571428571428571,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.8571428571428571,\n",
              " 0.6,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9230769230769231,\n",
              " 0.0,\n",
              " 0.9090909090909091,\n",
              " 0.46153846153846156,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.9,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.3333333333333333,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.35294117647058826,\n",
              " 0.6666666666666666,\n",
              " 0.9090909090909091,\n",
              " 0.0,\n",
              " 0.9473684210526315,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.9473684210526315,\n",
              " 0.9090909090909091,\n",
              " 0.8333333333333334,\n",
              " 0.9473684210526315,\n",
              " 0.9,\n",
              " 0.8333333333333334,\n",
              " 0.9090909090909091,\n",
              " 0.9090909090909091,\n",
              " 0.875,\n",
              " 0.9333333333333333,\n",
              " 0.9333333333333333,\n",
              " 0.4444444444444444,\n",
              " 0.8333333333333334,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.38461538461538464,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.55,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9,\n",
              " 0.0,\n",
              " 0.3333333333333333,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.4,\n",
              " 0.1875,\n",
              " 0.4,\n",
              " 0.6470588235294118,\n",
              " 0.8333333333333334,\n",
              " 0.5454545454545454,\n",
              " 0.8333333333333334,\n",
              " 0.0,\n",
              " 0.7333333333333333,\n",
              " 0.631578947368421,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.8571428571428571,\n",
              " 0.2857142857142857,\n",
              " 0.75,\n",
              " 1.0,\n",
              " 0.75,\n",
              " 0.7857142857142857,\n",
              " 0.2727272727272727,\n",
              " 0.46153846153846156,\n",
              " 0.4,\n",
              " 0.42857142857142855,\n",
              " 0.375,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.4444444444444444,\n",
              " 0.2608695652173913,\n",
              " 0.21428571428571427,\n",
              " 0.75,\n",
              " 0.42857142857142855,\n",
              " 0.2608695652173913,\n",
              " 0.75,\n",
              " 0.6666666666666666,\n",
              " 1.0,\n",
              " 0.8571428571428571,\n",
              " 0.5789473684210527,\n",
              " 0.9411764705882353,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.9411764705882353,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.5,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.8571428571428571,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.8,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.5454545454545454,\n",
              " 0.5454545454545454,\n",
              " 0.8,\n",
              " 0.2857142857142857,\n",
              " 0.0,\n",
              " 0.3157894736842105,\n",
              " 0.2857142857142857,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.29411764705882354,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.6428571428571429,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.6666666666666666,\n",
              " 1.0,\n",
              " 0.35294117647058826,\n",
              " 0.375,\n",
              " 0.3333333333333333,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.3,\n",
              " 0.35294117647058826,\n",
              " 0.4,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.46153846153846156,\n",
              " 0.4444444444444444,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.42857142857142855,\n",
              " 0.35294117647058826,\n",
              " 0.42857142857142855,\n",
              " 0.6,\n",
              " 0.3333333333333333,\n",
              " 0.7142857142857143,\n",
              " 0.5454545454545454,\n",
              " 0.42857142857142855,\n",
              " 0.8181818181818182,\n",
              " 0.9,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.5454545454545454,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.45454545454545453,\n",
              " 0.7272727272727273,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.41379310344827586,\n",
              " 0.3870967741935484,\n",
              " 0.42857142857142855,\n",
              " 0.75,\n",
              " 0.2,\n",
              " 0.7058823529411765,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.631578947368421,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.21428571428571427,\n",
              " 0.2608695652173913,\n",
              " 0.2608695652173913,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.3157894736842105,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.3,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.7058823529411765,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.5714285714285714,\n",
              " 0.5714285714285714,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.25,\n",
              " 0.0,\n",
              " 0.21428571428571427,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.4782608695652174,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.2727272727272727,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.21428571428571427,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.6666666666666666,\n",
              " 0.9230769230769231,\n",
              " 0.9230769230769231,\n",
              " 0.9230769230769231,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.3157894736842105,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.46153846153846156,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.3,\n",
              " 0.5714285714285714,\n",
              " 0.0,\n",
              " 0.3,\n",
              " 0.5454545454545454,\n",
              " 0.2857142857142857,\n",
              " 0.3,\n",
              " 0.2608695652173913,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.2727272727272727,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.3157894736842105,\n",
              " 0.3157894736842105,\n",
              " 0.5625,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.46153846153846156,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.6428571428571429,\n",
              " 0.6111111111111112,\n",
              " 0.2857142857142857,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.8181818181818182,\n",
              " 0.7333333333333333,\n",
              " 0.35294117647058826,\n",
              " 0.35294117647058826,\n",
              " 0.5454545454545454,\n",
              " 0.46153846153846156,\n",
              " 0.3333333333333333,\n",
              " 0.375,\n",
              " 0.5,\n",
              " 0.7272727272727273,\n",
              " 0.5454545454545454,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.375,\n",
              " 1.0,\n",
              " 0.9230769230769231,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.75,\n",
              " 0.3157894736842105,\n",
              " 0.7727272727272727,\n",
              " 0.5142857142857142,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 1.0,\n",
              " 0.7142857142857143,\n",
              " 0.0,\n",
              " 0.6153846153846154,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.25,\n",
              " 0.6666666666666666,\n",
              " 0.8181818181818182,\n",
              " 0.0,\n",
              " 0.2727272727272727,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.8571428571428571,\n",
              " 0.75,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9,\n",
              " 0.6666666666666666,\n",
              " 0.5,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.6666666666666666,\n",
              " 0.47368421052631576,\n",
              " 0.8571428571428571,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.375,\n",
              " 0.2777777777777778,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.6470588235294118,\n",
              " 0.2727272727272727,\n",
              " 0.8181818181818182,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.2727272727272727,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.4,\n",
              " 1.0,\n",
              " 0.3,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.6842105263157895,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.5714285714285714,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.6818181818181818,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.7142857142857143,\n",
              " 0.3,\n",
              " 0.0,\n",
              " 0.46153846153846156,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.9,\n",
              " 0.3,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.8421052631578947,\n",
              " 0.0,\n",
              " 0.6875,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.3333333333333333,\n",
              " 0.8125,\n",
              " 0.5714285714285714,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.46153846153846156,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.3157894736842105,\n",
              " 0.5,\n",
              " 0.5454545454545454,\n",
              " 0.4,\n",
              " 0.4166666666666667,\n",
              " 0.42857142857142855,\n",
              " 0.4166666666666667,\n",
              " 0.75,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.42857142857142855,\n",
              " 0.1935483870967742,\n",
              " 0.46153846153846156,\n",
              " 0.7272727272727273,\n",
              " 0.75,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.35294117647058826,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.6,\n",
              " 0.5714285714285714,\n",
              " 0.6666666666666666,\n",
              " 0.24,\n",
              " 0.45454545454545453,\n",
              " 0.5454545454545454,\n",
              " 0.35714285714285715,\n",
              " 0.2727272727272727,\n",
              " 0.5454545454545454,\n",
              " 0.5714285714285714,\n",
              " 0.6666666666666666,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " 0.29411764705882354,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.6153846153846154,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.6666666666666666,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.2608695652173913,\n",
              " 0.5555555555555556,\n",
              " 0.75,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.6,\n",
              " 0.3333333333333333,\n",
              " 0.75,\n",
              " 0.5,\n",
              " 0.8571428571428571,\n",
              " 0.6666666666666666,\n",
              " 0.6666666666666666,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.3333333333333333,\n",
              " 0.8571428571428571,\n",
              " 0.5454545454545454,\n",
              " 0.75,\n",
              " 0.5454545454545454,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.75,\n",
              " 0.0,\n",
              " 0.5217391304347826,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.46153846153846156,\n",
              " 1.0,\n",
              " 0.5454545454545454,\n",
              " 0.46153846153846156,\n",
              " 1.0,\n",
              " 1.0,\n",
              " 0.6666666666666666,\n",
              " 0.5454545454545454,\n",
              " 0.35294117647058826,\n",
              " 0.8571428571428571,\n",
              " 0.75,\n",
              " 0.46153846153846156,\n",
              " 0.5217391304347826,\n",
              " 0.75,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.631578947368421,\n",
              " 0.0,\n",
              " 0.42857142857142855,\n",
              " 0.3157894736842105,\n",
              " 0.0,\n",
              " 0.5454545454545454,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.6666666666666666,\n",
              " 1.0,\n",
              " 0.2857142857142857,\n",
              " 0.5454545454545454,\n",
              " 0.0,\n",
              " 0.35294117647058826,\n",
              " 0.5217391304347826,\n",
              " 0.6,\n",
              " 0.75,\n",
              " 0.6,\n",
              " 0.5454545454545454,\n",
              " 0.6,\n",
              " 0.6,\n",
              " 0.9230769230769231,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.0,\n",
              " 0.3333333333333333,\n",
              " 0.0,\n",
              " 0.375,\n",
              " 0.375,\n",
              " 0.42857142857142855,\n",
              " 0.0,\n",
              " 0.46153846153846156,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.5,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.4,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.0,\n",
              " 0.6666666666666666,\n",
              " ...]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V3ltcyALvrKo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "103bb356-5122-4dfd-e567-848048c14704"
      },
      "source": [
        "df_desec_AromaticProportion= pd.DataFrame(desc_AromaticProportion, columns=['AromaticProportion'])\n",
        "df_desec_AromaticProportion"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>0.695652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>0.521739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>0.461538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      AromaticProportion\n",
              "0               0.000000\n",
              "1               0.000000\n",
              "2               0.000000\n",
              "3               0.000000\n",
              "4               0.000000\n",
              "...                  ...\n",
              "1139            0.000000\n",
              "1140            0.333333\n",
              "1141            0.695652\n",
              "1142            0.521739\n",
              "1143            0.461538\n",
              "\n",
              "[1144 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EXbERZSFz7C-",
        "colab_type": "text"
      },
      "source": [
        "**3.3 X matrix (Combining all computed descriptors into 1 dataframe)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ufo4OKJ00HPG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "bfc6d9da-9676-420a-ca00-11b77e9534e5"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.59540</td>\n",
              "      <td>167.850</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.37650</td>\n",
              "      <td>133.405</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.59380</td>\n",
              "      <td>167.850</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.02890</td>\n",
              "      <td>133.405</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.98820</td>\n",
              "      <td>287.343</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>3.42130</td>\n",
              "      <td>286.114</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>3.60960</td>\n",
              "      <td>308.333</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>2.56214</td>\n",
              "      <td>354.815</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>2.02164</td>\n",
              "      <td>179.219</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds\n",
              "0     2.59540  167.850                0.0\n",
              "1     2.37650  133.405                0.0\n",
              "2     2.59380  167.850                1.0\n",
              "3     2.02890  133.405                1.0\n",
              "4     2.91890  187.375                1.0\n",
              "...       ...      ...                ...\n",
              "1139  1.98820  287.343                8.0\n",
              "1140  3.42130  286.114                2.0\n",
              "1141  3.60960  308.333                4.0\n",
              "1142  2.56214  354.815                3.0\n",
              "1143  2.02164  179.219                1.0\n",
              "\n",
              "[1144 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ja0RQOGJyeI8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "d896bf8f-dc7d-43fa-8d35-6544da2502af"
      },
      "source": [
        "df_desec_AromaticProportion"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>0.695652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>0.521739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>0.461538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      AromaticProportion\n",
              "0               0.000000\n",
              "1               0.000000\n",
              "2               0.000000\n",
              "3               0.000000\n",
              "4               0.000000\n",
              "...                  ...\n",
              "1139            0.000000\n",
              "1140            0.333333\n",
              "1141            0.695652\n",
              "1142            0.521739\n",
              "1143            0.461538\n",
              "\n",
              "[1144 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8epWTXE6yva2",
        "colab_type": "text"
      },
      "source": [
        "Let's combine the 2 dataframes to produce X matrix "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jgcBzy3DyvIF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "41ff2f05-b887-4669-d8ef-6dc5d2884c41"
      },
      "source": [
        "x=pd.concat([df,df_desec_AromaticProportion], axis=1)\n",
        "x"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.59540</td>\n",
              "      <td>167.850</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.37650</td>\n",
              "      <td>133.405</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.59380</td>\n",
              "      <td>167.850</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.02890</td>\n",
              "      <td>133.405</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.98820</td>\n",
              "      <td>287.343</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>3.42130</td>\n",
              "      <td>286.114</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>3.60960</td>\n",
              "      <td>308.333</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.695652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>2.56214</td>\n",
              "      <td>354.815</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.521739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>2.02164</td>\n",
              "      <td>179.219</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.461538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds  AromaticProportion\n",
              "0     2.59540  167.850                0.0            0.000000\n",
              "1     2.37650  133.405                0.0            0.000000\n",
              "2     2.59380  167.850                1.0            0.000000\n",
              "3     2.02890  133.405                1.0            0.000000\n",
              "4     2.91890  187.375                1.0            0.000000\n",
              "...       ...      ...                ...                 ...\n",
              "1139  1.98820  287.343                8.0            0.000000\n",
              "1140  3.42130  286.114                2.0            0.333333\n",
              "1141  3.60960  308.333                4.0            0.695652\n",
              "1142  2.56214  354.815                3.0            0.521739\n",
              "1143  2.02164  179.219                1.0            0.461538\n",
              "\n",
              "[1144 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hY73Ck-21DkV",
        "colab_type": "text"
      },
      "source": [
        "**3.4 Y matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a0WlQIEN1Hza",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "0950e472-0a10-4960-84b4-143da0f6dd01"
      },
      "source": [
        "sol.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Compound ID</th>\n",
              "      <th>measured log(solubility:mol/L)</th>\n",
              "      <th>ESOL predicted log(solubility:mol/L)</th>\n",
              "      <th>SMILES</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1,1,1,2-Tetrachloroethane</td>\n",
              "      <td>-2.18</td>\n",
              "      <td>-2.794</td>\n",
              "      <td>ClCC(Cl)(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1,1,1-Trichloroethane</td>\n",
              "      <td>-2.00</td>\n",
              "      <td>-2.232</td>\n",
              "      <td>CC(Cl)(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1,1,2,2-Tetrachloroethane</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>-2.549</td>\n",
              "      <td>ClC(Cl)C(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1,1,2-Trichloroethane</td>\n",
              "      <td>-1.48</td>\n",
              "      <td>-1.961</td>\n",
              "      <td>ClCC(Cl)Cl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1,1,2-Trichlorotrifluoroethane</td>\n",
              "      <td>-3.04</td>\n",
              "      <td>-3.077</td>\n",
              "      <td>FC(F)(Cl)C(F)(Cl)Cl</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      Compound ID  ...               SMILES\n",
              "0       1,1,1,2-Tetrachloroethane  ...       ClCC(Cl)(Cl)Cl\n",
              "1           1,1,1-Trichloroethane  ...         CC(Cl)(Cl)Cl\n",
              "2       1,1,2,2-Tetrachloroethane  ...       ClC(Cl)C(Cl)Cl\n",
              "3           1,1,2-Trichloroethane  ...           ClCC(Cl)Cl\n",
              "4  1,1,2-Trichlorotrifluoroethane  ...  FC(F)(Cl)C(F)(Cl)Cl\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D9mnh5b-1YfF",
        "colab_type": "text"
      },
      "source": [
        "Assigning the second column (index 1) to the Y matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_NvpGxX01ffW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "68b7f4d1-91db-4f28-90ef-1de493d9d47c"
      },
      "source": [
        "y=sol.iloc[:,1]\n",
        "y"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      -2.180\n",
              "1      -2.000\n",
              "2      -1.740\n",
              "3      -1.480\n",
              "4      -3.040\n",
              "        ...  \n",
              "1139    1.144\n",
              "1140   -4.925\n",
              "1141   -3.893\n",
              "1142   -3.790\n",
              "1143   -2.581\n",
              "Name: measured log(solubility:mol/L), Length: 1144, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HHmUWUJb1zct",
        "colab_type": "text"
      },
      "source": [
        "# **Data Split**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RaIJ3f2e12LQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2_h1p1NL2Vt1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LkN6qzL93PEP",
        "colab_type": "text"
      },
      "source": [
        "# **Linear Regression Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KVAe38hM3W33",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn import linear_model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lw0khYBr3ltI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VnrVw9jz35SN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        },
        "outputId": "f0be1ab1-71ff-42a7-9e0f-a1b0ef595b02"
      },
      "source": [
        "model= linear_model.LinearRegression()\n",
        "model.fit(x_train,y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_EpY2Y2R4a49",
        "colab_type": "text"
      },
      "source": [
        "**Predicts the X_train**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UgpyDmXe4fvH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_pred_train=model.predict(x_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oik6lYWx45Is",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "8eab2550-0a50-4249-b3e5-bd87cb8fee24"
      },
      "source": [
        "print('Coefficients:',model.coef_)\n",
        "print('intercept:', model.intercept_)\n",
        "print('Mean squared error (MSE):%.2f' %mean_squared_error(y_train,y_pred_train))\n",
        "print('Coefficient of determination(R^2):%.2f' %r2_score (y_train,y_pred_train))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Coefficients: [-0.77445734 -0.00637047  0.002264   -0.35829476]\n",
            "intercept: 0.29201281609112284\n",
            "Mean squared error (MSE):0.97\n",
            "Coefficient of determination(R^2):0.78\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "13LcJBEs60pP",
        "colab_type": "text"
      },
      "source": [
        "**Predict X_test**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CahWx_tC6xzm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_pred_test=model.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c6Arl3dA7hce",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "d519545d-bdae-4c9f-fc50-060a5af28027"
      },
      "source": [
        "print('Coefficients:',model.coef_)\n",
        "print('intercept:', model.intercept_)\n",
        "print('Mean squared error (MSE):%.2f' %mean_squared_error(y_test,y_pred_test))\n",
        "print('Coefficient of determination(R^2):%.2f' %r2_score (y_test,y_pred_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Coefficients: [-0.77445734 -0.00637047  0.002264   -0.35829476]\n",
            "intercept: 0.29201281609112284\n",
            "Mean squared error (MSE):1.19\n",
            "Coefficient of determination(R^2):0.73\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OrE9uNno8x_j",
        "colab_type": "text"
      },
      "source": [
        "**Linear Regression Equation**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jatBcpRB848e",
        "colab_type": "text"
      },
      "source": [
        "The work of Delaney provided the following linear regression equation:\n",
        "\n",
        "\n",
        "\n",
        "> LogS = 0.16 - 0.63cLogP - 0.062MW+ 0.066 RB - 0.74AP\n",
        "\n",
        "The reproduction by Pat Walters provided the following:\n",
        "\n",
        "\n",
        "\n",
        "> LogS= 0.26 - 0.74LogP - 0.066MW + 0.0034RB - 0.36AP\n",
        "\n",
        "This notebook's reproduction gave the following equation:\n",
        "\n",
        "\n",
        "*   Based on the Train set:\n",
        "\n",
        "\n",
        "> LogS = 0.30 - 0.75LogP - 0.066MW - 0.0041RB - 0.36AP\n",
        "\n",
        "*   Based on Full dataset:\n",
        "\n",
        "\n",
        "> LogS = 0.26 - 0.74LogP - 0.0066MW + 0.0032RB - 0.42AP\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IEdhH6gGE36L",
        "colab_type": "text"
      },
      "source": [
        "**Our linear regression equation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ugPgqHUa82jq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "d42dbaad-b477-48f1-9010-381b0911e8ff"
      },
      "source": [
        "print('LogS= %.2f %.2f LogP %.4f MW %.4f RB %.2f AP' %(model.intercept_,model.coef_[0],model.coef_[1],model.coef_[2],model.coef_[3]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LogS= 0.29 -0.77 LogP -0.0064 MW 0.0023 RB -0.36 AP\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vap8yV-TH64F",
        "colab_type": "text"
      },
      "source": [
        "The same equation can also be produced with the following code."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WbuwIVrwIJN_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "yintercept= '%.2f' % model.intercept_\n",
        "LogP= '%.2f LogP' %model.coef_[0]\n",
        "MW= '%.4f MW' %model.coef_[1]\n",
        "RB= '%.4f RB' %model.coef_[2]\n",
        "AP= '%.2f AP' %model.coef_[3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DmJJejITI_dy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "67360107-d17c-43a3-dec9-66aa470aafcb"
      },
      "source": [
        "print('LogS = ' + \n",
        "      ' ' + \n",
        "      yintercept + \n",
        "      ' ' + \n",
        "      LogP + \n",
        "      ' ' + \n",
        "      MW + \n",
        "      ' ' + \n",
        "      RB + \n",
        "      ' ' + \n",
        "      AP)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LogS =  0.29 -0.77 LogP -0.0064 MW 0.0023 RB -0.36 AP\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZmgHhiveMJTW",
        "colab_type": "text"
      },
      "source": [
        "**Scatter plot of experimental vs predicted LogS**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8fNjPelfMHhJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zvLBxZPOOKUt",
        "colab_type": "text"
      },
      "source": [
        "**Quick check of the variable dimension of Train and Test sets**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Gl6ZZxWOTSZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6b129cd9-fcb4-4732-90b9-cc5231788ecf"
      },
      "source": [
        "y_train.shape, y_pred_train.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((915,), (915,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hnLg13zLPOlP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "11c44c3d-0e75-48a7-e622-0a028e4d89f5"
      },
      "source": [
        "y_test.shape, y_pred_test.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((229,), (229,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r30LyLt7QjAE",
        "colab_type": "text"
      },
      "source": [
        "Vertical plot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B_NB8yG_QoWI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 660
        },
        "outputId": "be3f95bf-358b-4029-f618-b0f23b4e1084"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(5,11))\n",
        "\n",
        "# 2 row, 1 column, plot 1\n",
        "plt.subplot(2, 1, 1)\n",
        "plt.scatter(x=y_train, y=y_pred_train, c=\"#7CAE00\", alpha=0.3)\n",
        "\n",
        "# Add trendline\n",
        "# https://stackoverflow.com/questions/26447191/how-to-add-trendline-in-python-matplotlib-dot-scatter-graphs\n",
        "z = np.polyfit(y_train, y_pred_train, 1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_test,p(y_test),\"#F8766D\")\n",
        "\n",
        "plt.ylabel('Predicted LogS')\n",
        "\n",
        "\n",
        "# 2 row, 1 column, plot 2\n",
        "plt.subplot(2, 1, 2)\n",
        "plt.scatter(x=y_test, y=y_pred_test, c=\"#619CFF\", alpha=0.3)\n",
        "\n",
        "z = np.polyfit(y_test, y_pred_test, 1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_test,p(y_test),\"#F8766D\")\n",
        "\n",
        "plt.ylabel('Predicted LogS')\n",
        "plt.xlabel('Experimental LogS')\n",
        "\n",
        "plt.savefig('plot_vertical_logS.png')\n",
        "plt.savefig('plot_vertical_logS.pdf')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x792 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jzGYEWOWREOo",
        "colab_type": "text"
      },
      "source": [
        "Horizontal plot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7bRE4Nc_RGfk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "0396411e-7109-424d-87f6-e53f2bdac826"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(11,5))\n",
        "\n",
        "# 2 row, 1 column, plot 1\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.scatter(x=y_train, y=y_pred_train, c=\"#7CAE00\", alpha=0.3)\n",
        "\n",
        "\n",
        "z = np.polyfit(y_train, y_pred_train, 1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_test,p(y_test),\"#F8766D\")\n",
        "\n",
        "plt.ylabel('Predicted LogS')\n",
        "plt.xlabel('Experimental LogS')\n",
        "\n",
        "# 2 row, 1 column, plot 2\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.scatter(x=y_test, y=y_pred_test, c=\"#619CFF\", alpha=0.3)\n",
        "\n",
        "z = np.polyfit(y_test, y_pred_test, 1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_test,p(y_test),\"#F8766D\")\n",
        "\n",
        "plt.xlabel('Experimental LogS')\n",
        "\n",
        "plt.savefig('plot_vertical_logS.png')\n",
        "plt.savefig('plot_vertical_logS.pdf')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 792x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SXdCuLmM1exA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "outputId": "f3260304-d9d3-4295-a9be-9763f108d8f1"
      },
      "source": [
        "! ls -1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Miniconda3-py37_4.8.2-Linux-x86_64.sh\n",
            "Miniconda3-py37_4.8.2-Linux-x86_64.sh.1\n",
            "plot_vertical_logS.pdf\n",
            "plot_vertical_logS.png\n",
            "sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ARiv3f1iC565",
        "colab_type": "text"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EICKN2Hn5X_L",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jwM1QHeLbxJl",
        "colab_type": "text"
      },
      "source": [
        "## **Reference**\n",
        "\n",
        "1. John S. Delaney. [ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure](https://pubs.acs.org/doi/10.1021/ci034243x). ***J. Chem. Inf. Comput. Sci.*** 2004, 44, 3, 1000-1005.\n",
        "\n",
        "2. Pat Walters. [Predicting Aqueous Solubility - It's Harder Than It Looks](http://practicalcheminformatics.blogspot.com/2018/09/predicting-aqueous-solubility-its.html). ***Practical Cheminformatics Blog***\n",
        "\n",
        "3. Bharath Ramsundar, Peter Eastman, Patrick Walters, and Vijay Pande. [Deep Learning for the Life Sciences: Applying Deep Learning to Genomics, Microscopy, Drug Discovery, and More](https://learning.oreilly.com/library/view/deep-learning-for/9781492039822/), O'Reilly, 2019.\n",
        "\n",
        "4. [Supplementary file](https://pubs.acs.org/doi/10.1021/ci034243x) from Delaney's ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure.\n",
        "\n",
        "5. Scott M. Lundberg and Su-In Lee. [A Unified Approach to Interpreting Model Predictions](https://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions), A Unified Approach to Interpreting Model Predictions, ***Advances in Neural Information Processing Systems 30 (NIPS 2017)***, 2017."
      ]
    }
  ]
}